import asyncio
import aiohttp
from SinhVien import SinhVien

API_URL = "https://script.google.com/macros/s/AKfycbzXJa5hdpcEUSvZcKIC17vtWFUoCRqn9ljDCnqjIsxWjyOmKOe9uZeTMFoB1ffMM-lCQw/exec"
CYCLES = 5

async def process_student_cycle(sv: SinhVien, session: aiohttp.ClientSession) -> int:
    # L·∫•y ds_dk v√† g·ª≠i l·ªánh
    await sv.get_ds_dangky(session)
    if not sv.ds_dk:
        print(f"{sv.username}: kh√¥ng c√≥ l·ªánh, b·ªè qua.")
        return 0

    tasks = [l.xulydkmhsinhvien(session, sv.auth) for l in sv.ds_dk]
    await asyncio.gather(*tasks)
    count = len(sv.ds_dk)
    print(f"{sv.username}: ho√†n th√†nh {count} l·ªánh v√≤ng n√†y.")
    return count

async def main():
    # 0) L·∫•y danh s√°ch sinh vi√™n v√† login 1 l·∫ßn
    params = {"type": "sinhvien"}
    async with aiohttp.ClientSession() as session:
        try:
            resp = await session.get(API_URL, params=params)
            resp.raise_for_status()
            data = await resp.json()
        except Exception as e:
            print("L·ªói khi l·∫•y DS sinh vi√™n:", e)
            return

        dssv = [SinhVien(row["mssv"], row.get("password", "")) for row in data]
        print(f"ƒê√£ t·∫°o {len(dssv)} SinhVien.")

        # Login m·ªôt l·∫ßn cho t·∫•t c·∫£
        await asyncio.gather(*(sv.login(session) for sv in dssv))
        print("‚úÖ ƒê√£ login xong cho t·∫•t c·∫£ sinh vi√™n.\n")

        # 1) V√≤ng l·∫∑p ch√≠nh, h·ªèi l·∫∑p l·∫°i sau m·ªói 10 cycles
        while True:
            total_all = 0
            for cycle in range(1, CYCLES + 1):
                print(f"\n=== V√≤ng {cycle}/{CYCLES} ===")
                results = await asyncio.gather(
                    *(process_student_cycle(sv, session) for sv in dssv)
                )
                sent = sum(results)
                total_all += sent
                print(f"V√≤ng {cycle} ƒë√£ g·ª≠i {sent} l·ªánh.")

            print(f"\nüîî Ho√†n th√†nh {CYCLES} v√≤ng, t·ªïng c·ªông ƒë√£ g·ª≠i {total_all} l·ªánh.")

            # H·ªèi ng∆∞·ªùi d√πng c√≥ ti·∫øp t·ª•c kh√¥ng
            answer = await asyncio.to_thread(input, "B·∫°n c√≥ mu·ªën ch·∫°y th√™m 10 v√≤ng n·ªØa kh√¥ng? (y/n): ")
            if answer.strip().lower() not in ("y", "yes"):
                print("K·∫øt th√∫c ch∆∞∆°ng tr√¨nh.")
                break
            print("\n‚è≠Ô∏è B·∫Øt ƒë·∫ßu ch·∫°y l·∫°i 10 v√≤ng...\n")

if __name__ == "__main__":
    asyncio.run(main())
